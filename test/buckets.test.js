/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2018, Joyent, Inc.
 */

var mod_tape = require('tape');

var mod_artedi = require('..');

function simpleTest(t, func, args, expected) {
    t.deepEquals(mod_artedi[func].apply(null, args),
        expected,
        'test ' + func + '(' + args.join(', ') + ')');
}


mod_tape('artedi1Buckets', function (t) {

    simpleTest(t, t.name, [], [
        0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009,
        0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009,
        0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09,
        0.18, 0.27, 0.36, 0.45, 0.54, 0.63, 0.72, 0.81,
        1.62, 2.43, 3.24, 4.05, 4.86, 5.67, 6.48, 7.29, 8.1,
        25, 42, 59, 76,
        228, 380, 532, 684,
        2052, 3420, 4788, 6156,
        18468, 30780, 43092, 55404,
        166212, 277020, 387828, 498636,
        1495908, 2493180, 3490452, 4487724,
        13463172, 22438620, 31414068, 40389516,
        121168548, 201947580, 282726612, 363505644,
        1090516932, 1817528220, 2544539508, 3271550796 ]);

    simpleTest(t, t.name,
        [ 1090516932 ],
        [ 1090516932, 1817528220, 2544539508, 3271550796 ]);

    simpleTest(t, t.name,
        [ 0.0025, 1 ],
        [ 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009,
            0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09,
            0.18, 0.27, 0.36, 0.45, 0.54, 0.63, 0.72, 0.81, 1.62 ]);

    t.end();

});


mod_tape('linearBuckets', function (t) {

    simpleTest(t, t.name,
        [ 1, 1, 10 ],
        [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]);

    simpleTest(t, t.name,
        [ -1, 0.1, 10 ],
        [ -1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1 ]);

    t.end();
});


mod_tape('exponentialBuckets', function (t) {

    simpleTest(t, t.name,
        [ 1, 2, 5 ],
        [ 1, 2, 4, 8, 16 ]);

    t.end();
});


mod_tape('logLinearBuckets', function (t) {

    // These first tests match: https://github.com/illumos/illumos-gate/blob/7256a34efe9df75b638b9e812912ef7c5c68e208/usr/src/cmd/dtrace/test/tst/common/llquantize/tst.bases.d

    simpleTest(t, t.name,
        [ 2, 0, 6, 2 ],
        [ 1, 2,   // <= 2^1
            4,    // <= 2^2
            8,    // <= 2^3
            16,   // <= 2^4
            32,   // <= 2^5
            64,   // <= 2^6
            128   // <= 2^7 (contains the 2^6 magnitude)
        ]);

    simpleTest(t, t.name,
        [ 3, 0, 1, 9 ],
        [ 1, 2, 3,            // <= 3^1
            4, 5, 6, 7, 8, 9  // <= 3^2
        ]);

    simpleTest(t, t.name,
        [ 4, 0, 1, 4 ],
        [ 1, 2, 3, 4,  // <= 4^1
            8, 12, 16  // <= 4^2
        ]);

    simpleTest(t, t.name,
        [ 5, 0, 1, 25 ],
        [ 1, 2, 3, 4, 5,                                                                // <= 5^1
            6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25  // <= 5^2
        ]);

    simpleTest(t, t.name,
        [ 6, 0, 3, 12 ],
        [ 1, 2, 3, 4, 5, 6,                                      // <= 6^1
            9, 12, 15, 18, 21, 24, 27, 30, 33, 36,               // <= 6^2
            54, 72, 90, 108, 126, 144, 162, 180, 198, 216,       // <= 6^3
            324, 432, 540, 648, 756, 864, 972, 1080, 1188, 1296  // <= 6^4
        ]);

    simpleTest(t, t.name,
        [ 7, 0, 1, 7 ],
        [ 1,                         // <= 7^0
            2, 3, 4, 5, 6, 7,        // <= 7^1
            14, 21, 28, 35, 42, 49   // <= 7^2
        ]);

    simpleTest(t, t.name,
        [ 8, 0, 1, 16 ],
        [ 1, 2, 3, 4, 5, 6, 7, 8,                                   // <= 8^1
            12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64  // <= 8^2
        ]);

    simpleTest(t, t.name,
        [ 9, 0, 1, 9 ],
        [ 1, 2, 3, 4, 5, 6, 7, 8, 9,        // <= 9^1
            18, 27, 36, 45, 54, 63, 72, 81  // <= 9^2
        ]);

    simpleTest(t, t.name,
        [ 10, 0, 1, 10 ],
        [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,         // <= 10^1
            20, 30, 40, 50, 60, 70, 80, 90, 100  // <= 10^2
        ]);

    // <end of DTrace copied tests>

    simpleTest(t, t.name,
        [ 10, -3, 1, 10 ],
        [ 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.01,  // <= 10^-2
            0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1,                // <= 10^-1
            0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1,                          // <= 10^0
            2, 3, 4, 5, 6, 7, 8, 9, 10,                                         // <= 10^1
            20, 30, 40, 50, 60, 70, 80, 90, 100                                 // <= 10^2
        ]);

    // TODO: should we really be limiting to base steps when value < base?
    simpleTest(t, t.name,
        [ 10, -3, 1, 20 ],
        [ 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009, 0.01,       // <= 10^-2
            0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1,                     // <= 10^-1
            0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1,                               // <= 10^0
            2, 3, 4, 5, 6, 7, 8, 9, 10,                                              // <= 10^1
            15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100  // <= 10^2
        ]);

    t.end();
});
